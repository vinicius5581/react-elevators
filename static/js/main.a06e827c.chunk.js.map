{"version":3,"sources":["components/Floor.js","components/Elevator.js","components/Elevators.js","components/Building.js","components/App.js","serviceWorker.js","index.js"],"names":["Floor","react_default","a","createElement","className","this","props","label","Component","Elevator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentFloor","goinToFloor","elevatorMovement","floorsWaitingUp","floorsWaitingDown","floor","_this2","setState","setInterval","prevState","goToFloor","clearTimeout","console","log","style","height","buildingHeight","floorHeight","bottom","backgroundColor","Elevators","elevators","toConsumableArray","Array","elevatorsQty","map","elevator","targetFloor","movement","floorsBtns","floorsQty","up","requestedTime","Date","down","index_es","icon","idx","src_components_Elevator","key","Building","building","React","createRef","current","offsetHeight","floors","ref","src_components_Floor","src_components_Elevators","App","library","add","faArrowAltCircleUp","faArrowAltCircleDown","faStroopwafel","src_components_Building","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a06e827c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Floor.css';\n\nclass Floor extends Component {\n  render() {\n    return (\n        <div className=\"floor\">\n            {this.props.label}\n        </div>\n    );\n  }\n}\n\nexport default Floor;\n","import React, { Component } from 'react';\nimport './Elevator.css';\n\nclass Elevator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentFloor: 1,\n            goinToFloor: null,\n            elevatorMovement: null,\n            floorsWaitingUp : [],\n            floorsWaitingDown: []\n        }\n    }\n    goToFloor(floor) {\n        this.setState({\n            goinToFloor: floor\n        })\n        this.elevatorMovement = setInterval(() => {\n            this.setState(prevState => {\n                return {currentFloor: prevState.currentFloor + 0.5}\n            })\n        }, 200);  \n    }\n\n    componentDidMount() {\n        this.goToFloor(10);\n    }\n\n    componentDidUpdate() {\n        if (this.state.currentFloor > this.state.goinToFloor) { \n            clearTimeout(this.elevatorMovement);\n        }\n    }\n\n    render() {        \n        console.log('CURRENT FLOOR', this.state.currentFloor);\n        return (\n            <div \n            className=\"elevatorShaft\"\n                style={{\n                    height: this.props.buildingHeight\n                }}\n            >                \n                <div \n                    className=\"elevator\"\n                    style={{\n                        height: this.props.floorHeight,\n                        bottom: this.props.floorHeight * this.state.currentFloor,\n                        backgroundColor: 'red'\n                    }}\n                >\n                    \n                </div>                    \n            </div>         \n        );\n    }\n}\n\nexport default Elevator;\n","import React, { Component } from 'react';\nimport Elevator from './Elevator';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './Elevators.css';\n\nclass Elevators extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            elevators: [...new Array(this.props.elevatorsQty)].map(elevator => ({\n                currentFloor: 0,\n                targetFloor: 0,\n                movement: 'stopped',                \n            })),\n            floorsBtns: [...new Array(this.props.floorsQty + 1)].map(floor => ({\n                up: {\n                    state: 'off',\n                    requestedTime: new Date(),\n                }, \n                down:  {\n                    state: 'off',\n                    requestedTime: new Date(),\n                },\n            }))\n        }\n    }\n\n    render() {\n        return (\n            <div \n                className=\"elevators\"\n                style={{height: this.props.buildingHeight}}\n            >\n                <div \n                    className=\"floorsBtns\"\n                    style={{\n                        height: this.props.buildingHeight\n                    }}\n                >\n                    {[... new Array(this.props.floorsQty + 1)].map(floor => (\n                        <div \n                            className=\"floorBtns\"\n                            style={{\n                                height: this.props.floorHeight\n                            }}\n                        >\n                            <button>\n                                <FontAwesomeIcon \n                                    icon=\"arrow-alt-circle-up\" \n                                    className='btnUp'\n                                />\n                            </button>\n                            <button>\n                                <FontAwesomeIcon \n                                    icon=\"arrow-alt-circle-down\"\n                                    className='btnDown'\n                                />\n                            </button>\n                        </div>\n                    ))}\n                </div>\n                {[...new Array(this.props.elevatorsQty)].map((elevator, idx) => (\n                    <Elevator \n                        key={idx}\n                        floorsQty={this.props.floorsQty}\n                        floorHeight={this.props.floorHeight}\n                        buildingHeight={this.props.buildingHeight}\n                    />\n                ))}                  \n            </div>\n        );\n    }\n}\n\nexport default Elevators;\n","import React, { Component } from 'react';\nimport Floor from './Floor';\nimport Elevators from './Elevators';\nimport './Building.css';\n\nclass Building extends Component {\n  constructor(props) {\n    super(props);\n    this.building = React.createRef();\n    this.state = {\n      buildingHeight: 0\n    }\n  }\n\n  componentDidMount () {\n    this.setState({\n      buildingHeight: this.building.current.offsetHeight,\n      floorHeight: this.building.current.offsetHeight / this.props.floors\n    })\n  }\n\n  render() {\n    return (\n        <div \n          ref={this.building}\n          className=\"building\"\n        >\n          <div>\n            {[...new Array(this.props.floors + 1)].map((floor, idx) => (\n              <Floor \n                key={idx}\n                label={this.props.floors - idx === 0 ? 'T' : this.props.floors - idx}\n               />\n            ))} \n            <Elevators \n              floorsQty={this.props.floors}\n              floorHeight={this.state.floorHeight}\n              elevatorsQty={this.props.elevators}\n              buildingHeight={this.state.buildingHeight}\n            />\n          </div>                    \n        </div>\n    );\n  }\n}\n\nexport default Building;\n","import React, { Component } from 'react';\nimport Building from './Building';\nimport { library } from '@fortawesome/fontawesome-svg-core'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStroopwafel, faArrowAltCircleUp, faArrowAltCircleDown } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    library.add(faArrowAltCircleUp, faArrowAltCircleDown, faStroopwafel)\n    return (\n      <div className=\"App\">\n        <Building \n          floors={20}\n          elevators={3}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}